trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    exclude:
    - README.md

pr: none

pool:
  vmImage: 'windows-latest'

variables:
  - group: 'Build-Variables'
  - name: 'buildConfiguration'
    value: 'Release'
  - name: 'projectName'
    value: 'WebApp'

resources:
  repositories:
  - repository: MyGitRepo
    type: git
    name: MyProject/MyGitRepo

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    continueOnError: true
    steps:
    - checkout: MyGitRepo
      fetchDepth: 1

    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
        restoreKeys: |
          nuget | "$(Agent.OS)"
        path: $(Pipeline.Workspace)/.nuget/packages
      displayName: 'Cache NuGet packages'

    - script: dotnet restore
      displayName: 'DotNet Restore'
      
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'DotNet Build'
      
    - script: dotnet test --configuration $(buildConfiguration) --collect:"Code coverage"
      displayName: 'DotNet Test'
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: true

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deployment Job'
    environment:
      name: 'Production'
      resourceType: 'VirtualMachine'
    strategy:
      runOnce:
        preDeploy:
          steps:
          - download: none
            artifact: webapp
          
        deploy:
          steps:
          - script: dotnet publish -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)
            displayName: 'DotNet Publish'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'webapp'
              publishLocation: 'Container'
